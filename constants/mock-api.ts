////////////////////////////////////////////////////////////////////////////////
// üõë Nh·ªØng n·ªôi dung ·ªü ƒë√¢y kh√¥ng li√™n quan ƒë·∫øn NextJS, ƒë√¢y ch·ªâ l√† m·ªôt c∆° s·ªü d·ªØ li·ªáu gi·∫£
////////////////////////////////////////////////////////////////////////////////

import { faker } from '@faker-js/faker';
import { matchSorter } from 'match-sorter'; // D√πng ƒë·ªÉ l·ªçc d·ªØ li·ªáu theo t·ª´ kh√≥a

// H√†m delay ƒë·ªÉ t·∫°o ƒë·ªô tr·ªÖ m√¥ ph·ªèng x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô
export const delay = (ms: number) =>
    new Promise((resolve) => setTimeout(resolve, ms));

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho Product (ƒë∆∞·ª£c g·ªçi l√† Course ·ªü ƒë√¢y)
export type Course = {
    photo_url: string;   // URL h√¨nh ·∫£nh c·ªßa s·∫£n ph·∫©m/kh√≥a h·ªçc
    name: string;        // T√™n s·∫£n ph·∫©m/kh√≥a h·ªçc
    description: string; // M√¥ t·∫£ c·ªßa s·∫£n ph·∫©m/kh√≥a h·ªçc
    created_at: string;  // Ng√†y t·∫°o (d·∫°ng chu·ªói ISO)
    price: number;       // Gi√° c·ªßa s·∫£n ph·∫©m/kh√≥a h·ªçc
    id: number;          // ID duy nh·∫•t c·ªßa s·∫£n ph·∫©m/kh√≥a h·ªçc
    category: string;    // Danh m·ª•c c·ªßa s·∫£n ph·∫©m/kh√≥a h·ªçc
    updated_at: string;  // Ng√†y c·∫≠p nh·∫≠t (d·∫°ng chu·ªói ISO)
};

// "fakeCourses" l√† kho d·ªØ li·ªáu gi·∫£ d√πng ƒë·ªÉ m√¥ ph·ªèng d·ªØ li·ªáu s·∫£n ph·∫©m/kh√≥a h·ªçc
export const fakeCourses = {
    records: [] as Course[], // L∆∞u tr·ªØ danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m/kh√≥a h·ªçc

    // H√†m kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u
    initialize() {
        const sampleCourses: Course[] = [];

        // H√†m t·∫°o d·ªØ li·ªáu s·∫£n ph·∫©m ng·∫´u nhi√™n v·ªõi id truy·ªÅn v√†o
        function generateRandomProductData(id: number): Course {
            const categories = [
                'Electronics',      // ƒêi·ªán t·ª≠
                'Furniture',        // N·ªôi th·∫•t
                'Clothing',         // Qu·∫ßn √°o
                'Toys',             // ƒê·ªì ch∆°i
                'Groceries',        // H√†ng t·∫°p h√≥a
                'Books',            // S√°ch
                'Jewelry',          // Trang s·ª©c
                'Beauty Products'   // M·ªπ ph·∫©m
            ];

            return {
                id,
                name: faker.commerce.productName(),           // T√™n s·∫£n ph·∫©m ng·∫´u nhi√™n
                description: faker.commerce.productDescription(),// M√¥ t·∫£ s·∫£n ph·∫©m ng·∫´u nhi√™n
                created_at: faker.date
                    .between({ from: '2022-01-01', to: '2023-12-31' })
                    .toISOString(),                           // Ng√†y t·∫°o ng·∫´u nhi√™n trong kho·∫£ng
                price: parseFloat(faker.commerce.price({ min: 5, max: 500, dec: 2 })), // Gi√° s·∫£n ph·∫©m ng·∫´u nhi√™n
                photo_url: `https://api.slingacademy.com/public/sample-products/${id}.png`, // URL h√¨nh ·∫£nh m·∫´u
                category: faker.helpers.arrayElement(categories), // Ch·ªçn ng·∫´u nhi√™n m·ªôt danh m·ª•c
                updated_at: faker.date.recent().toISOString()    // Ng√†y c·∫≠p nh·∫≠t g·∫ßn ƒë√¢y
            };
        }

        // Sinh 20 b·∫£n ghi s·∫£n ph·∫©m m·∫´u
        for (let i = 1; i <= 20; i++) {
            sampleCourses.push(generateRandomProductData(i));
        }

        this.records = sampleCourses;
    },

    // H√†m l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi t√≠nh nƒÉng l·ªçc theo danh m·ª•c v√† t√¨m ki·∫øm
    async getAll({
        categories = [],   // M·∫£ng danh m·ª•c l·ªçc (m·∫∑c ƒë·ªãnh r·ªóng t·ª©c l√† kh√¥ng l·ªçc)
        search             // T·ª´ kh√≥a t√¨m ki·∫øm (n·∫øu c√≥)
    }: {
        categories?: string[];
        search?: string;
    }) {
        let products = [...this.records];

        // L·ªçc s·∫£n ph·∫©m theo danh m·ª•c n·∫øu danh m·ª•c ƒë∆∞·ª£c cung c·∫•p
        if (categories.length > 0) {
            products = products.filter((product) =>
                categories.includes(product.category)
            );
        }

        // T√¨m ki·∫øm s·∫£n ph·∫©m qua c√°c tr∆∞·ªùng: name, description, category
        if (search) {
            products = matchSorter(products, search, {
                keys: ['name', 'description', 'category']
            });
        }

        return products;
    },

    // H√†m l·∫•y k·∫øt qu·∫£ ph√¢n trang v·ªõi t√πy ch·ªçn l·ªçc theo danh m·ª•c v√† t√¨m ki·∫øm
    async getCourses({
        page = 1,         // S·ªë trang (m·∫∑c ƒë·ªãnh l√† trang 1)
        limit = 10,       // S·ªë s·∫£n ph·∫©m tr√™n 1 trang (m·∫∑c ƒë·ªãnh l√† 10)
        categories,       // Danh m·ª•c, ƒë∆∞·ª£c truy·ªÅn d∆∞·ªõi d·∫°ng chu·ªói (c√°c m·ª•c ph√¢n c√°ch nhau b·∫±ng d·∫•u ch·∫•m)
        search            // T·ª´ kh√≥a t√¨m ki·∫øm
    }: {
        page?: number;
        limit?: number;
        categories?: string;
        search?: string;
    }) {
        await delay(1000); // ƒê·ª£i 1 gi√¢y ƒë·ªÉ m√¥ ph·ªèng x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô

        // N·∫øu c√≥ danh m·ª•c, t√°ch chu·ªói th√†nh m·∫£ng danh m·ª•c
        const categoriesArray = categories ? categories.split('.') : [];
        const allProducts = await this.getAll({
            categories: categoriesArray,
            search
        });
        const totalProducts = allProducts.length;

        // T√≠nh to√°n v·ªã tr√≠ b·∫Øt ƒë·∫ßu cho ph√¢n trang
        const offset = (page - 1) * limit;
        // L·∫•y c√°c s·∫£n ph·∫©m cho trang hi·ªán t·∫°i
        const paginatedProducts = allProducts.slice(offset, offset + limit);

        // M√¥ ph·ªèng th·ªùi gian hi·ªán t·∫°i d∆∞·ªõi d·∫°ng chu·ªói ISO
        const currentTime = new Date().toISOString();

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√¢n trang
        return {
            success: true,
            time: currentTime,
            message: 'Sample data for testing and learning purposes',
            total_products: totalProducts,
            offset,
            limit,
            products: paginatedProducts
        };
    },

    // H√†m l·∫•y m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ theo ID
    async getCourseById(id: number) {
        await delay(1000); // M√¥ ph·ªèng ƒë·ªô tr·ªÖ

        // T√¨m ki·∫øm s·∫£n ph·∫©m theo id trong danh s√°ch records
        const product = this.records.find((product) => product.id === id);

        if (!product) {
            return {
                success: false,
                message: `Product with ID ${id} not found`
            };
        }

        // M√¥ ph·ªèng th·ªùi gian hi·ªán t·∫°i d∆∞·ªõi d·∫°ng chu·ªói ISO
        const currentTime = new Date().toISOString();

        return {
            success: true,
            time: currentTime,
            message: `Product with ID ${id} found`,
            product
        };
    }
};

// Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u ngay khi file ƒë∆∞·ª£c import
fakeCourses.initialize();